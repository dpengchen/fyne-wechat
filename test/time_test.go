package test

import (
	"bytes"
	"encoding/base64"
	"image"
	"image/png"
	"log"
	"os"
	"testing"
	"time"
)

func TestTime(t *testing.T) {
	day := time.Now().Day()
	log.Println(day)
}

func TestBase64ToImage(t *testing.T) {
	base64Str := "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"

	decodeString, err := base64.StdEncoding.DecodeString(base64Str)
	log.Println(err)

	img, _, err := image.Decode(bytes.NewReader(decodeString))
	log.Println(err)

	file, err := os.OpenFile("test.png", os.O_CREATE|os.O_WRONLY, 0644)
	log.Println(err)
	png.Encode(file, img)
}
